{
	"name": "df_avrofile_process_lifeworks_sample",
	"properties": {
		"description": "\n\nwildcard pattern -- \n\n41_ctr_ca_04042023_*",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "sourceaescafiles"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "sourcectrlcafiles"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SequenceNumber as long,",
				"          Offset as string,",
				"          EnqueuedTimeUtc as string,",
				"          SystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Properties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Body as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'avro',",
				"     fileSystem: 'row-data',",
				"     folderPath: 'sample_avro_data',",
				"     fileName: '46_aes_ca_04042023_1925.avro') ~> sourceaescafiles",
				"source(output(",
				"          SequenceNumber as long,",
				"          Offset as string,",
				"          EnqueuedTimeUtc as string,",
				"          SystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Properties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Body as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'avro',",
				"     fileSystem: 'row-data',",
				"     wildcardPaths:[(concat(\"/sample_avro_data\", \"/\",\"4*.avro\"))]) ~> sourcectrlcafiles",
				"sourceaescafiles parse(NewBody = Body ? (Records as (kinesis as (kinesisSchemaVersion as string,",
				"     partitionKey as string,",
				"     sequenceNumber as string,",
				"     data as string,",
				"     approximateArrivalTimestamp as integer),",
				"     eventSource as string,",
				"     eventVersion as string,",
				"     eventID as string,",
				"     eventName as string,",
				"     invokeIdentityArn as string,",
				"     awsRegion as string,",
				"     eventSourceARN as string)[])[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 foldDown(unroll(NewBody.Records),",
				"     mapColumn(",
				"          eventSource = NewBody.Records.eventSource,",
				"          eventVersion = NewBody.Records.eventVersion,",
				"          eventID = NewBody.Records.eventID,",
				"          eventName = NewBody.Records.eventName,",
				"          invokeIdentityArn = NewBody.Records.invokeIdentityArn,",
				"          awsRegion = NewBody.Records.awsRegion,",
				"          eventSourceARN = NewBody.Records.eventSourceARN,",
				"          SequenceNumber,",
				"          kinesispartitionKey = NewBody.Records.kinesis.partitionKey,",
				"          kinesisSchemaVersion = NewBody.Records.kinesis.kinesisSchemaVersion,",
				"          kinesissequenceNumber = NewBody.Records.kinesis.sequenceNumber",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 select(mapColumn(",
				"          eventSource,",
				"          eventVersion,",
				"          eventID,",
				"          eventName,",
				"          invokeIdentityArn,",
				"          awsRegion,",
				"          eventSourceARN,",
				"          SequenceNumber,",
				"          kinesispartitionKey,",
				"          kinesisSchemaVersion,",
				"          kinesissequenceNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'row-data',",
				"     folderPath: 'sample_avro_data',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}