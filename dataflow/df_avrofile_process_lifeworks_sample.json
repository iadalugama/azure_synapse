{
	"name": "df_avrofile_process_lifeworks_sample",
	"properties": {
		"description": "\n\nwildcard pattern -- \n\n41_ctr_ca_04042023_*",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "sourceaescafiles"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "sinkavrotocsv"
				},
				{
					"name": "sinkAvroToCache"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				},
				{
					"name": "parse1"
				},
				{
					"name": "parse2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "SplitCsvAndCache"
				}
			],
			"scriptLines": [
				"parameters{",
				"     source_path as string ('none')",
				"}",
				"source(output(",
				"          SequenceNumber as long,",
				"          Offset as string,",
				"          EnqueuedTimeUtc as string,",
				"          SystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Properties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Body as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'avro',",
				"     fileSystem: 'row-data',",
				"     folderPath: 'sample_avro_data',",
				"     fileName: '46_aes_ca_04042023_1925.avro') ~> sourceaescafiles",
				"parse1 foldDown(unroll(newbody.Records, newbody.Records),",
				"     mapColumn(",
				"          data = newbody.Records.kinesis.data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"parse2 select(mapColumn(",
				"          Name = data[1].CurrentAgentSnapshot.AgentStatus.Name,",
				"          StartTimestamp = data[1].CurrentAgentSnapshot.AgentStatus.StartTimestamp,",
				"          Channel = data[1].CurrentAgentSnapshot.Configuration.RoutingProfile.Concurrency[1].Channel",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"sourceaescafiles parse(newbody = Body ? (Records as ",
				"",
				"(kinesis as ",
				"",
				"(kinesisSchemaVersion as string,",
				"     partitionKey as string,",
				"     sequenceNumber as string,",
				"     data as string,",
				"     approximateArrivalTimestamp as integer)",
				"     )[])[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"derivedColumn1 parse(data = data ? (AWSAccountId as string,",
				"     AgentARN as string,",
				"     CurrentAgentSnapshot as (AgentStatus as (ARN as string,",
				"     Name as string,",
				"     StartTimestamp as string,",
				"     Type as string),",
				"     Configuration as (AgentHierarchyGroups as string,",
				"     AutoAccept as boolean,",
				"     FirstName as string,",
				"     LanguageCode as string,",
				"     LastName as string,",
				"     ProficiencyList as string ,",
				"     RoutingProfile as (ARN as string,",
				"     Concurrency as (AvailableSlots as integer,",
				"     Channel as string,",
				"     MaximumSlots as integer)[],",
				"     DefaultOutboundQueue as (ARN as string,",
				"     ",
				"     Name as string),",
				"     InboundQueues as (ARN as string,",
				"     ",
				"     Name as string)[],",
				"     Name as string),",
				"     SipAddress as string,",
				"     Username as string),",
				"     Contacts as (Channel as string,",
				"     ConnectedToAgentTimestamp as string,",
				"     ContactId as string,",
				"     InitialContactId as string,",
				"     InitiationMethod as string,",
				"     Queue as (ARN as string,",
				"     Name as string),",
				"     QueueTimestamp as string ,",
				"     State as string,",
				"     StateStartTimestamp as string)[],",
				"     NextAgentStatus as string ),",
				"     EventId as string,",
				"     EventTimestamp as string,",
				"     EventType as string,",
				"     InstanceARN as string,",
				"     PreviousAgentSnapshot as (AgentStatus as (ARN as string,",
				"     Name as string,",
				"     StartTimestamp as string,",
				"     Type as string),",
				"     Configuration as (AgentHierarchyGroups as string,",
				"     AutoAccept as boolean,",
				"     FirstName as string,",
				"     LanguageCode as string,",
				"     LastName as string,",
				"     ProficiencyList as string ,",
				"     RoutingProfile as (ARN as string,",
				"     Concurrency as (AvailableSlots as integer,",
				"     Channel as string,",
				"     MaximumSlots as integer)[],",
				"     DefaultOutboundQueue as (ARN as string,",
				"     Name as string),",
				"     InboundQueues as (ARN as string,",
				"     ",
				"     Name as string)[],",
				"     Name as string),",
				"     SipAddress as string,",
				"     Username as string),",
				"     Contacts as (Channel as string,",
				"     ConnectedToAgentTimestamp as string,",
				"     ContactId as string,",
				"     InitialContactId as string,",
				"     InitiationMethod as string,",
				"     Queue as (ARN as string,",
				"     Name as string),",
				"     QueueTimestamp as string,",
				"     State as string,",
				"     StateStartTimestamp as string)[],",
				"     NextAgentStatus as string),",
				"     Version as string)[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse2",
				"flatten1 derive(data = fromBase64(data)) ~> derivedColumn1",
				"select1 split(true(),",
				"     true(),",
				"     disjoint: true) ~> SplitCsvAndCache@(sinkAvroToCsv, sinkAvroToCache)",
				"SplitCsvAndCache@sinkAvroToCsv sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'row-data',",
				"     folderPath: 'sample_csv_data',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2) ~> sinkavrotocsv",
				"SplitCsvAndCache@sinkAvroToCache sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 1) ~> sinkAvroToCache"
			]
		}
	}
}