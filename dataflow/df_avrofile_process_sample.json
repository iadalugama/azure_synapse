{
	"name": "df_avrofile_process_sample",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage_generaladls2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "parse1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SequenceNumber as long,",
				"          Offset as string,",
				"          EnqueuedTimeUtc as string,",
				"          SystemProperties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Properties as [string,(member0 as long, member1 as double, member2 as string, member3 as binary)],",
				"          Body as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'avro',",
				"     fileSystem: 'row-data',",
				"     folderPath: 'sample_avro_data',",
				"     fileName: '22.avro') ~> source1",
				"source1 parse(Body = Body ? (applicationId as string,",
				"     messageSource as string,",
				"     deviceId as string,",
				"     schema as string,",
				"     templateId as string,",
				"     enqueuedTime as string,",
				"     telemetry as (temperature as integer,pressure as integer,magnetometer as (x as integer,",
				"     y as integer,     z as integer),",
				"     gyroscope as (x as integer,",
				"     y as integer,",
				"     z as integer),",
				"     accelerometer as (x as integer,",
				"     y as integer,",
				"     z as integer),",
				"     humidity as integer)",
				"     )[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 foldDown(unroll(BodyStructure),",
				"     mapColumn(",
				"          SequenceNumber,",
				"          Offset,",
				"          EnqueuedTimeUtc,",
				"          SystemProperties,",
				"          Properties,",
				"          Body",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 select(mapColumn(",
				"          applicationId,",
				"          messageSource,",
				"          deviceId,",
				"          schema,",
				"          templateId,",
				"          enqueuedTime,",
				"          temperature,",
				"          pressure,",
				"          SequenceNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}