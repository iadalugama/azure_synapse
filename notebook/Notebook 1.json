{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SampleSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bd36e708-bd8b-43ea-9c17-23e70b77d812"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3c321efc-9b78-45cd-ab39-1378151cbd42/resourceGroups/test-synapse-analytics/providers/Microsoft.Synapse/workspaces/synapsewsp01/bigDataPools/SampleSpark",
				"name": "SampleSpark",
				"type": "Spark",
				"endpoint": "https://synapsewsp01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://row-data@generaladls2.dfs.core.windows.net/sample_json_data/Aurelio_Jacobs.json', format='json')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Create a SparkSession\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Define the path to the JSON file in Azure Data Lake Gen2\r\n",
					"#file_path = \"abfss://<storage-account-name>@<filesystem-name>.dfs.core.windows.net/<path-to-json-file>\"\r\n",
					"# Define the path to the JSON file in Azure Data Lake\r\n",
					"\r\n",
					"file_path = \"abfss://row-data@generaladls2.dfs.core.windows.net/sample_json_data/example_1.json\"\r\n",
					"#file_path = \"abfss://row-data@generaladls2.dfs.core.windows.net/sample_json_data/Aurelio_Jacobs.json\"\r\n",
					"\r\n",
					"# Read the JSON file, ignoring corrupt records\r\n",
					"json_df = spark.read.option(\"mode\", \"PERMISSIVE\").json(file_path)\r\n",
					"# Filter out the corrupt records\r\n",
					"clean_json_df = json_df.filter(json_df[\"_corrupt_record\"].isNull())\r\n",
					"\r\n",
					"clean_json_df.printSchema()\r\n",
					"# Read the JSON file\r\n",
					"#json_df = spark.read.json(file_path, multiLine=True)\r\n",
					"#json_df.printSchema()\r\n",
					"\r\n",
					"#json_df.show(truncate=False)\r\n",
					"\r\n",
					"# Select and extract values from nested elements\r\n",
					"#nested_values_df = json_df.select(    json_df.type.alias(\"type\")  )\r\n",
					"\r\n",
					"# Show the extracted values\r\n",
					"#nested_values_df.show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"select * from CustomerAddress "
				],
				"execution_count": null
			}
		]
	}
}