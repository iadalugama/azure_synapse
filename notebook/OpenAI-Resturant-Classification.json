{
	"name": "OpenAI-Resturant-Classification",
	"properties": {
		"folder": {
			"name": "OpenAI-test"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SampleSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4b796376-71b3-4697-8c3d-b3559eea46b2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3c321efc-9b78-45cd-ab39-1378151cbd42/resourceGroups/test-synapse-analytics/providers/Microsoft.Synapse/workspaces/synapsewsp01/bigDataPools/SampleSpark",
				"name": "SampleSpark",
				"type": "Spark",
				"endpoint": "https://synapsewsp01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from synapse.ml.core.platform import find_secret\r\n",
					"\r\n",
					"# Fill in the following lines with your service information\r\n",
					"service_name = \"rest-review\" # Name of your OpenAI service\r\n",
					"deployment_name = \"text-davinci-002\" # Name of your deployment in OpenAI\r\n",
					"key = find_secret(\"opanaikey\", \"kv-t01\")  # replace this with your secret and keyvault"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"df = spark.read.option('header', 'true') \\\r\n",
					"                .option('delimiter', ',') \\\r\n",
					"                .csv('abfss://row-data@generaladls2.dfs.core.windows.net/sample_csv_data/RestaurantReviews.csv')\r\n",
					"\r\n",
					"display(df)\r\n",
					"\r\n",
					"# https://generaladls2.blob.core.windows.net/row-data/sample_csv_data/RestaurantReviews.csv"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dfprompt = df.withColumn(\"prompt\",\\\r\n",
					"                concat(lit(\"Classify the sentiment of following restaurant review. \\n \\\r\n",
					"                Classifications: [Positive, Negative , Neutral] \\n Review:\\\"\\\"\\\" \")\\\r\n",
					"                , col(\"Review\")\\\r\n",
					"                ,lit(\"\\\"\\\"\\\"\\nClassification:\")))\\\r\n",
					"            \r\n",
					"\r\n",
					"display(dfprompt)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from synapse.ml.cognitive import OpenAICompletion\r\n",
					"\r\n",
					"completion = (\r\n",
					"    OpenAICompletion()\r\n",
					"    .setSubscriptionKey(key)\r\n",
					"    .setDeploymentName(deployment_name)\r\n",
					"    .setUrl(\"https://{}.openai.azure.com/\".format(service_name))\r\n",
					"    #.setMaxTokens(200)\r\n",
					"    .setPromptCol(\"prompt\")\r\n",
					"    .setErrorCol(\"error\")\r\n",
					"    .setOutputCol(\"response\")\r\n",
					")"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"completed_df = completion.transform(dfprompt).cache()\r\n",
					"\r\n",
					"display(completed_df)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"display(\r\n",
					"    completed_df.select( \r\n",
					"        col('Restaurant'), \r\n",
					"        col('Review'), \r\n",
					"        col('response.choices.text').getItem(0).alias('openai_sentiment')     \r\n",
					"    )\r\n",
					"    \r\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}