{
	"name": "csv_validation_pandas",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SampleSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "272e3e87-74a0-4d33-9362-4c06918ad47c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3c321efc-9b78-45cd-ab39-1378151cbd42/resourceGroups/test-synapse-analytics/providers/Microsoft.Synapse/workspaces/synapsewsp01/bigDataPools/SampleSpark",
				"name": "SampleSpark",
				"type": "Spark",
				"endpoint": "https://synapsewsp01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\r\n",
					"#read csv file\r\n",
					"df = pd.read_csv('abfss://row-data@generaladls2.dfs.core.windows.net/sample_csv_data/CCS_2023.01 Global Partner Reportingv2.csv')\r\n",
					"df = df.head(10)\r\n",
					"print(df)"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check that the DataFrame has the expected number of rows and columns\r\n",
					"df.shape == (2, 22)\r\n",
					"print(df.describe())"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install  pandas_schema"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# https://safjan.com/pandas-schema-validation/\r\n",
					"\r\n",
					"from pandas_schema import Column, Schema\r\n",
					"\r\n",
					"from pandas_schema.validation import LeadingWhitespaceValidation, TrailingWhitespaceValidation, IsDtypeValidation, InListValidation\r\n",
					"\r\n",
					"schema = Schema([\r\n",
					"    Column('Case Open Date', [LeadingWhitespaceValidation(), TrailingWhitespaceValidation()]),\r\n",
					"    Column('Org ID', [IsDtypeValidation(int), InListValidation(range(1079738, 1007182))]),\r\n",
					"    Column('gender', [InListValidation(['male', 'female'])])\r\n",
					"])\r\n",
					"\r\n",
					"errors = schema.validate(df)\r\n",
					"\r\n",
					"print(errors)"
				],
				"execution_count": 34
			}
		]
	}
}